export type Serializable = boolean | number | string | null | { [key: string]: Serializable } | Serializable[];

export type User = {
    // The user's full name
    name: string;
    // The user's selected exam group
    group: string | null;
}

export type TermList = {
    // The category display name 
    category: string;
    // The terms inside the category
    terms: Term[];
}[]

export type Term = {
    // A unique term identifier
    id: number;
    // The term
    content: string;
}

export type Thread = {
    // A unique thread identifier
    id: number;
    // The thread state (ready - a message can be written by the user, generating - a message is being generated by gpt)
    state: 'ready' | 'generating';
    // The exam's question number/identifier
    question: string | null;
    // The user selected answer
    answer: string | null;
    // Messages inside the thread
    messages: Message[];
}

export type Message = {
    // The message type (user - a message written by the user, gpt - a message generated by gpt, system - a system message)
    type: 'user';
    // The user's full name
    user: string;
    // The message content
    content: string;
} | {
    // The message type (user - a message written by the user, gpt - a message generated by gpt, system - a system message)
    type: 'gpt';
    // The message content
    content: string;
} | {
    // The message type (user - a message written by the user, gpt - a message generated by gpt, system - a system message)
    type: 'system';
    // The system message event (searching - gpt is searching Wikipedia, fetching - gpt is fetching a Wikipedia article)
    event: 'searching' | 'fetching';
    // The searched/fetched query
    content: string;
    // A link to the Wikipedia page
    link: string;
}

export enum PacketType {
    SB_PING = 0x00,
    CB_PONG = 0x01,

    SB_AUTHENTICATE = 0x10,
    CB_AUTHENTICATED = 0x11,

    CB_UPDATE_USER_LIST = 0x20,

    SB_ADD_TERM = 0x30,
    SB_REMOVE_TERM = 0x31,

    CB_UPDATE_TERM_LIST = 0x40,

    SB_REGISTER_GROUP = 0x50,

    SB_CREATE_THREAD = 0x60,
    SB_WRITE_MESSAGE = 0x61,
    SB_ANSWER_THREAD = 0x62,
    SB_REMOVE_THREAD = 0x63,

    CB_UPDATE_THREAD_LIST = 0x70,

    CB_ERROR_INVALID_PACKET = 0xf0,
    CB_ERROR_INVALID_STATE = 0xf1,
    CB_ERROR_INVALID_SUBJECT = 0xf3,
    CB_ERROR_AUTHENTICATION_FAILED = 0xf4,
    CB_ERROR_SESSION_EXISTS = 0xf5,
    CB_ERROR_INVALID_TERM = 0xf6,
    CB_ERROR_INVALID_GROUP = 0xf7,
    CB_ERROR_UNEXPECTED = 0xff,
}

export interface IPacket<T extends number, D extends { [key: string]: Serializable }> {
    code: T;
    data: D;
}

// Sent by the client to check if the server is accessible
export type PingPacket = IPacket<PacketType.SB_PING, {
    // A random number to echo back
    random: number
}>;

// Server's response to the ping packet
export type PongPacket = IPacket<PacketType.CB_PONG, {
    // An echo of the random number sent
    echo: number
}>;

// Sent by the client to authenticate the user and initialize the session
export type AuthenticatePacket = IPacket<PacketType.SB_AUTHENTICATE, {
    // The exam subject
    subject: string,
    // The user's authentication token
    token: string
}>;

// Server's response to the authenticate packet
export type AuthenticatedPacket = IPacket<PacketType.CB_AUTHENTICATED, {}>;

// Sent by the server to update the user list
export type UpdateUserListPacket = IPacket<PacketType.CB_UPDATE_USER_LIST, {
    // The user list
    users: User[]
}>;

// Sent by the client to add a term to the term list
export type AddTermPacket = IPacket<PacketType.SB_ADD_TERM, {
    // The category to add the term to
    category: string,
    // The term to add
    term: string
}>;

// Sent by the client to remove a term from the term list
export type RemoveTermPacket = IPacket<PacketType.SB_REMOVE_TERM, {
    // The term identifier to remove
    id: number
}>;

// Sent by the server to update the term list
export type UpdateTermListPacket = IPacket<PacketType.CB_UPDATE_TERM_LIST, {
    // The term list
    terms: TermList[]
}>;

// Sent by the client to register to an exam group
export type RegisterGroupPacket = IPacket<PacketType.SB_REGISTER_GROUP, {
    // The exam group to register
    group: string
}>;

// Sent by the client to create a new question thread
export type CreateThreadPacket = IPacket<PacketType.SB_CREATE_THREAD, {
    // The exam question number/identifier
    question: string | null
}>;

// Sent by the client to write a message to a question thread
export type WriteMessagePacket = IPacket<PacketType.SB_WRITE_MESSAGE, {
    // The thread identifier
    id: number,
    // The message content
    message: string
}>;

// Sent by the client to select an answer for a question thread
export type AnswerThreadPacket = IPacket<PacketType.SB_ANSWER_THREAD, {
    // The thread identifier
    id: number,
    // The selected answer
    answer: string
}>;

// Sent by the client to remove a question thread
export type RemoveThreadPacket = IPacket<PacketType.SB_REMOVE_THREAD, {
    // The thread identifier
    id: number
}>;

// Sent by the server to update the answer list
export type UpdateThreadListPacket = IPacket<PacketType.CB_UPDATE_THREAD_LIST, {
    // The question threads
    threads: Thread[];
}>;

// Sent by the server to indicate an invalid packet
export type ErrorInvalidPacketPacket = IPacket<PacketType.CB_ERROR_INVALID_PACKET, {}>;

// Sent by the server to indicate an invalid state
export type ErrorInvalidStatePacket = IPacket<PacketType.CB_ERROR_INVALID_STATE, {}>;

// Sent by the server to indicate an invalid subject
export type ErrorInvalidSubjectPacket = IPacket<PacketType.CB_ERROR_INVALID_SUBJECT, {}>;

// Sent by the server to indicate an authentication failure
export type ErrorAuthenticationFailedPacket = IPacket<PacketType.CB_ERROR_AUTHENTICATION_FAILED, {}>;

// Sent by the server to indicate an existing session
export type ErrorSessionExistsPacket = IPacket<PacketType.CB_ERROR_SESSION_EXISTS, {}>;

// Sent by the server to indicate an invalid term
export type ErrorInvalidTermPacket = IPacket<PacketType.CB_ERROR_INVALID_TERM, {}>;

// Sent by the server to indicate an invalid group
export type ErrorInvalidGroupPacket = IPacket<PacketType.CB_ERROR_INVALID_GROUP, {}>;

// Sent by the server to indicate an unexpected error
export type ErrorUnexpectedPacket = IPacket<PacketType.CB_ERROR_UNEXPECTED, {}>;
